// algoritmo.cpp : Defines the entry point for the console application.
// ( multiplicacion de los elementos matriz cuadrada (n x n) tal cual fue ingresado. )
// ( jose luis rojas quintanilla 27/10/2017. )
                                                                                
#include "stdafx.h" // librerias.
#include <iostream>
#include "conio.h"

#define fil_col 100 // define tama√±o del vector.

using namespace std;

void CargarMatrizCuadrada (int Mat[fil_col][fil_col], int n); // prototipos.
void MostrarMatrizCuadrada (int Mat[fil_col][fil_col], int n);
int MostrarMultiplicacionMatrizCuadrada (int Mat[fil_col][fil_col], int n);

void main ()
{
  int Mat[fil_col][fil_col]={'\0'}, n, M; // declarar variables.

  do
  {
     cout<< "ingrese cantidad de filas y columnas de la matriz cuadrada: ";
     cin>> n;
     cout<< endl;

  } while ((n < 0) || (n >= fil_col));

  CargarMatrizCuadrada (Mat, n); // llamar funcion cargar.
  MostrarMatrizCuadrada (Mat, n);
  M = MostrarMultiplicacionMatrizCuadrada (Mat, n); // llamar funcion mostrar.

  cout<< "la multiplicacion de los elementos de la matriz (n x n) es: ";
  cout<< M;

  getch();

}

void CargarMatrizCuadrada (int Mat[fil_col][fil_col], int n) // funcion cargar.
{
   cout<< "ingrese los elementos de la matriz cuadrada: ";
   cout<< endl<< endl;

   for (int i=0; i<n; i++)
   { for (int j=0; j<n; j++)
     {
        cout<< "Mat["<<i<<"]["<<j<<"]= ";
        cin>> Mat[i][j];
        cout<< endl;
     }
   }
}

void MostrarMatrizCuadrada (int Mat[fil_col][fil_col], int n) // funcion mostrar.
{
   cout<< "\tla matriz cuadrada (n x n) es: ";
   cout<< endl<< endl;

   for (int i=0; i<n; i++)
   { for (int j=0; j<n; j++)
     {
        cout<< "\t Mat["<<i<<"]["<<j<<"]= ";
        cout<< Mat[i][j];
     }

     cout<< endl<< endl;

   }
}

int MostrarMultiplicacionMatrizCuadrada (int Mat[fil_col][fil_col], int n) // funcion mostrar.
{ 
   int M = 1;

   for (int i=0; i<n; i++)
   { for (int j=0; j<n; j++)
     {
        M = M * Mat[i][j];
     }
   } 

   return (M);   
}



