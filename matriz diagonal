// algoritmo.cpp : Defines the entry point for the console application.
// ( diagonal principal de  una matriz cuadrada (n x n) . )
// ( jose luis rojas quintanilla 25/10/2017. )
                                                                                
#include "stdafx.h" // librerias.
#include <iostream>
#include "conio.h"

#define fil_col 100 // define tama√±o del vector.

using namespace std;

void CargarMatrizCuadrada (int Mat[fil_col][fil_col], int n); // prototipos.
void Diagonal (int Mat[fil_col][fil_col], int n, int MatD[fil_col][fil_col]);
void MostrarMatrizDiagonal (int MatD[fil_col][fil_col], int n);

void main ()
{
  int Mat[fil_col][fil_col]={'\0'}, n, MatD[fil_col][fil_col]={'\0'}; // declarar variables.

  do
  {
     cout<< "ingrese cantidad de filas y columnas de la matriz cuadrada: ";
     cin>> n;
     cout<< endl;

  } while ((n < 0) || (n >= fil_col));

  CargarMatrizCuadrada (Mat, n); // llamar funcion cargar.
  Diagonal (Mat, n, MatD); // llamar funcion diagonal.
  MostrarMatrizDiagonal (MatD, n); // llamar funcion mostrar.

  getch();

}

void CargarMatrizCuadrada (int Mat[fil_col][fil_col], int n) // funcion cargar.
{
   cout<< "ingrese los elementos de la matriz cuadrada: ";
   cout<< endl<< endl;

   for (int i=0; i<n; i++)
   { for (int j=0; j<n; j++)
     {
        cout<< "Mat["<<i<<"]["<<j<<"]= ";
        cin>> Mat[i][j];
        cout<< endl;
     }
   }
}

void Diagonal (int Mat[fil_col][fil_col], int n, int MatD[fil_col][fil_col]) // funcion diagonal.
{
  for (int i=0; i<n; i++)
  { for (int j=0; j<n; j++)
    {
       if ( i == j )
       {
          MatD[i][j] = Mat[i][j];   
       }
    }
  }
}


void MostrarMatrizDiagonal (int MatD[fil_col][fil_col], int n) // funcion mostrar.
{
   cout<< "\tla matriz cu (n x n) es: ";
   cout<< endl<< endl;

   for (int i=0; i<n; i++)
   { for (int j=0; j<n; j++)
     {
        cout<< "\t Mat["<<i<<"]["<<j<<"]= ";
        cout<< MatD[i][j];
     }

     cout<< endl<< endl;

   }
}

